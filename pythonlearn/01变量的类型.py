# 基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。
#
# 因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。


#多变量赋值
a = b = c = 1
a１, b1, c１ = 1, 2, "john"
print(a);print(b);print(c);
print(a１);print(b1);print(c１)


# 标准数据类型
# 在内存中存储的数据可以有多种类型。
#
# 例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。
#
# Python 定义了一些标准类型，用于存储各种类型的数据。
#
# Python有五个标准的数据类型：
#
# Numbers（数字）
# String（字符串）
# List（列表）
# Tuple（元组）
# Dictionary（字典）

var1 = 1
var2 = 10
#del var1 删变量的引用
print(var1)
print(var2)

# del语句的语法是：
#
# del var1[,var2[,var3[....,varN]]]]
#===========================数字的类型=======================================
# Python支持四种不同的数字类型：
#
# int（有符号整型）
# long（长整型[也可以代表八进制和十六进制]）
# float（浮点型）
# complex（复数）

#========================复数的实部和虚部====================================================

# 长整型也可以使用小写 l，但是还是建议您使用大写 L，避免与数字 1 混淆。Python使用 L 来显示长整型。
# Python 还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj,或者 complex(a,b) 表示， 复数的实部 a 和虚部 b 都是浮点型。

# python3后，long被移除－－－－－－－－－－－－－－－－－－－－－－－－－
# 在 Python3.X 版本中 long 类型被移除，使用 int 替代。

#==========================支付窜的取值==================================================
# 如果你要实现从字符串中获取一段子字符串的话，可以使用 [头下标:尾下标] 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。
s ="addfgh"
print(s[1:6])  #支付窜取值下标取值有两种方式

print(s[-3:-1])


#=============================字符窜截取第三个参数，设置步长====================================
# Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：

strbu="qwertyuiopasdfghjkl"
print(strbu[1:15:3])#从下标为１的开始取，跳过３－１个字母后，取一个字母依次往后

# ================python 的列表截取======================================================
# List（列表） 是 Python 中使用最频繁的数据类型。
#
# 列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。
#
# 列表用 [ ] 标识，是 python 最通用的复合数据类型。
#
# 列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。


#=====================列表的加号和星号操作==============================

#!/usr/bin/python
# -*- coding: UTF-8 -*-

list = [ 'runoob', 786 , 2.23, 'john', 70.2 ]
tinylist = [123, 'john']

print(list)               # 输出完整列表
print(list[0])            # 输出列表的第一个元素
print(list[1:3])          # 输出第二个至第三个元素
print(list[2:])           # 输出从第三个开始至列表末尾的所有元素
print(tinylist * 2)       # 输出列表两次  双倍的元素
print(list + tinylist)    # 打印组合的列表　　元素组合



#==============元组相当于只读列表=====================================
# 元组是另一个数据类型，类似于 List（列表）。
# 元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。
# 实例(Python 2.0+)


tuple = ( 'runoob', 786 , 2.23, 'john', 70.2 )
list = [ 'runoob', 786 , 2.23, 'john', 70.2 ]
#tuple[2] = 1000    # 元组中是非法应用
#list[2] = 1000     # 列表中是合法应用


#==================字典－－类似json格式====================================================
# Python 字典
# 字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。
#
# 两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
#
# 字典用"{ }"标识。字典由索引(key)和它对应的值value组成。


dict = {}
dict['one'] = "This is one"
dict[2] = "This is two"

tinydict = {'name': 'john','code':6734, 'dept': 'sales'}

print(dict['one'])          # 输出键为'one' 的值
print(dict[2])            # 输出键为 2 的值
print(tinydict)     # 输出完整的字典
print(tinydict.keys())     # 输出所有键
print(tinydict.values())   # 输出所有值

#==================数据类型的转换=========有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。

# 以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。========================
# int(x [,base])

# 将x转换为一个整数

# long(x [,base] )
#
# 将x转换为一个长整数
#
# float(x)
#
# 将x转换到一个浮点数
#
# complex(real [,imag])
#
# 创建一个复数
#
# str(x)
#
# 将对象 x 转换为字符串
#
# repr(x)
#
# 将对象 x 转换为表达式字符串
#
# eval(str)
#
# 用来计算在字符串中的有效Python表达式,并返回一个对象
#
# tuple(s)
#
# 将序列 s 转换为一个元组
#
# list(s)
#
# 将序列 s 转换为一个列表
#
# set(s)
#
# 转换为可变集合
#
# dict(d)
#
# 创建一个字典。d 必须是一个序列 (key,value)元组。
#
# frozenset(s)
#
# 转换为不可变集合
#
# chr(x)
#
# 将一个整数转换为一个字符
#
# unichr(x)
#
# 将一个整数转换为Unicode字符
#
# ord(x)
#
# 将一个字符转换为它的整数值
#
# hex(x)
#
# 将一个整数转换为一个十六进制字符串
#
# oct(x)
#
# 将一个整数转换为一个八进制字符串

str ='999'
inum =int(str)
print(inum+1)

#===================================================

#===================================================

#===================================================

#===================================================



#===================================================

#===================================================